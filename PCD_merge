
# построения общего облака из первичных сканов для ICP
while line:  
    A_and_C = list(map(float, line.split("  ")))
    mesh_num = str(int(A_and_C[0]))  # Значение 0-го элемента из .txt  в строку для имени облака
    point_cloud = o3d.io.read_point_cloud(mesh_num + '.ply')

    # масштаб: метры в миллиметры
    T_sc = np.eye(4)
    T_sc[0, 0] = 1000
    T_sc[1, 1] = 1000
    T_sc[2, 2] = 1000
    point_cloud = point_cloud.transform(T_sc)

    # Исходное облако
    # points = o3d.io.read_point_cloud('1(8).ply')

    # deepcopy не требуется, ничего не сравниваем
    # point_cloud = mesh_uncrop

    # Обрезка первичного скана
    S_P = {'x': 0.0, 'y': 0.0, 'z': 0.0}
    S_P_cuboid_points = getCuboidPoints(S_P)
    points = o3d.utility.Vector3dVector(S_P_cuboid_points)
    S_P_oriented_bounding_box = o3d.geometry.OrientedBoundingBox.create_from_points(points)
    mesh = point_cloud.crop(S_P_oriented_bounding_box)

    #########  Трезубец на глубину TCP робота
    oxyz = o3d.io.read_point_cloud("oxyz.ply")
    T_oxyz = np.eye(4)
    T_oxyz[0, 0] = 100
    T_oxyz[1, 1] = 100
    T_oxyz[2, 2] = 100
    T_oxyz[2, 3] = T_oxyz[2, 3]-485
    oxyz = oxyz.transform(T_oxyz)
    mesh = mesh #+ oxyz
    #########

    # Трансформация осей
    T_axis = np.eye(4)
    T_axis[0, 3] = 0
    T_axis[1, 3] = 0
    T_axis[2, 3] = 485
    mesh = mesh.transform(T_axis)

    oxyz2 = o3d.io.read_point_cloud("oxyz-2.ply")
    mesh = mesh  #+ oxyz2

    # Трансформация по SRC коду робота
    T2 = np.eye(4)
    T2[0, 3] = A_and_C[1]/1
    T2[1, 3] = A_and_C[2]/1
    T2[2, 3] = A_and_C[3]/1
    # Углы нумеруется с 1, т.к. 0-й - номер строки,    !!! для поворота Y берем значение из X  !!    углы: 90 и 180 , 
    T2[:3, :3] = mesh.get_rotation_matrix_from_zyx((np.radians(A_and_C[4]-90), np.radians(A_and_C[6]-180), 0))
    mesh_t = mesh.transform(T2)

    print(T2) # Вывод матрицы трансформаций

    o3d.io.write_point_cloud(mesh_num+"-T.ply", mesh_t, write_ascii=False, compressed=False, print_progress=True)

    pcd_combined += mesh_t
    #o3d.visualization.draw_geometries([pcd_combined])  #, mesh_box
    line = fopen.readline()
